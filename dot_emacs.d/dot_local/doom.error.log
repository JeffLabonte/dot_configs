# -*- lisp-interaction -*-
# vim: set ft=lisp:

(file-missing "Cannot open load file")

(load "/Users/jflabonte/.emacs.d/.local/autoloads.28.1" nil nomessage)

(condition-case e (load (string-remove-suffix ".el" doom-autoloads-file) nil 'nomessage) ((debug file-missing) (if (locate-file doom-autoloads-file load-path) (signal 'doom-autoload-error e) (signal 'doom-error (list "Doom is in an incomplete state" "run 'doom sync' on the command line to repair it")))))

(progn (setq doom-init-p t) (if doom-debug-p (progn (let ((inhibit-message t)) (message #("DOOM Initializing Doom" 0 5 (face font-lock-comment-face)))))) (let ((--dolist-tail-- '(exec-path load-path))) (while --dolist-tail-- (let ((var (car --dolist-tail--))) (set-default var (get var 'initial-value)) (setq --dolist-tail-- (cdr --dolist-tail--))))) (condition-case e (load (string-remove-suffix ".el" doom-autoloads-file) nil 'nomessage) ((debug file-missing) (if (locate-file doom-autoloads-file load-path) (signal 'doom-autoload-error e) (signal 'doom-error (list "Doom is in an incomplete state" "run 'doom sync' on the command line to repair it"))))) (if doom-debug-p (doom-debug-mode 1)) (if (and (or (display-graphic-p) (daemonp)) doom-env-file) (progn (progn (set-default 'process-environment (get 'process-environment 'initial-value))) (doom-load-envvars-file doom-env-file 'noerror))) (require 'core-modules) (autoload 'doom-initialize-packages "core-packages") (eval-after-load 'package #'(lambda nil (require 'core-packages))) (eval-after-load 'straight #'(lambda nil (doom-initialize-packages))) (if noninteractive nil (add-hook 'after-change-major-mode-hook #'doom-run-local-var-hooks-maybe-h 100) (add-hook 'hack-local-variables-hook #'doom-run-local-var-hooks-h) (add-hook 'emacs-startup-hook #'doom-load-packages-incrementally-h) (add-hook 'window-setup-hook #'doom-display-benchmark-h) (doom-run-hook-on 'doom-first-buffer-hook '(find-file-hook doom-switch-buffer-hook)) (doom-run-hook-on 'doom-first-file-hook '(find-file-hook dired-initial-position-hook)) (doom-run-hook-on 'doom-first-input-hook '(pre-command-hook)) (add-hook 'doom-first-buffer-hook #'gcmh-mode)))

(if (or force-p (not doom-init-p)) (progn (setq doom-init-p t) (if doom-debug-p (progn (let ((inhibit-message t)) (message #("DOOM Initializing Doom" 0 5 (face font-lock-comment-face)))))) (let ((--dolist-tail-- '(exec-path load-path))) (while --dolist-tail-- (let ((var (car --dolist-tail--))) (set-default var (get var 'initial-value)) (setq --dolist-tail-- (cdr --dolist-tail--))))) (condition-case e (load (string-remove-suffix ".el" doom-autoloads-file) nil 'nomessage) ((debug file-missing) (if (locate-file doom-autoloads-file load-path) (signal 'doom-autoload-error e) (signal 'doom-error (list "Doom is in an incomplete state" "run 'doom sync' on the command line to repair it"))))) (if doom-debug-p (doom-debug-mode 1)) (if (and (or (display-graphic-p) (daemonp)) doom-env-file) (progn (progn (set-default 'process-environment (get 'process-environment 'initial-value))) (doom-load-envvars-file doom-env-file 'noerror))) (require 'core-modules) (autoload 'doom-initialize-packages "core-packages") (eval-after-load 'package #'(lambda nil (require 'core-packages))) (eval-after-load 'straight #'(lambda nil (doom-initialize-packages))) (if noninteractive nil (add-hook 'after-change-major-mode-hook #'doom-run-local-var-hooks-maybe-h 100) (add-hook 'hack-local-variables-hook #'doom-run-local-var-hooks-h) (add-hook 'emacs-startup-hook #'doom-load-packages-incrementally-h) (add-hook 'window-setup-hook #'doom-display-benchmark-h) (doom-run-hook-on 'doom-first-buffer-hook '(find-file-hook doom-switch-buffer-hook)) (doom-run-hook-on 'doom-first-file-hook '(find-file-hook dired-initial-position-hook)) (doom-run-hook-on 'doom-first-input-hook '(pre-command-hook)) (add-hook 'doom-first-buffer-hook #'gcmh-mode))))

(doom-initialize)

(eval-buffer #<buffer  *load*-336861> nil "/Users/jflabonte/.emacs.d/init.el" nil t)

(load-with-code-conversion "/Users/jflabonte/.emacs.d/init.el" "/Users/jflabonte/.emacs.d/init.el" t t)

(load "/Users/jflabonte/.emacs.d/init" t nomessage)

(let (file-name-handler-alist) (load (expand-file-name file (plist-get plist :path)) t 'nomessage))

(condition-case e (let (file-name-handler-alist) (load (expand-file-name file (plist-get plist :path)) t 'nomessage)) ((debug doom-error) (signal (car e) (cdr e))) ((debug error) (doom--handle-load-error e (expand-file-name file (plist-get plist :path)) (plist-get plist :path))))

(let ((doom--current-module module) (doom--current-flags (plist-get plist :flags)) (inhibit-redisplay t)) (condition-case e (let (file-name-handler-alist) (load (expand-file-name file (plist-get plist :path)) t 'nomessage)) ((debug doom-error) (signal (car e) (cdr e))) ((debug error) (doom--handle-load-error e (expand-file-name file (plist-get plist :path)) (plist-get plist :path)))))

((closure ((file . "init") t) (module plist) (let ((doom--current-module module) (doom--current-flags (plist-get plist :flags)) (inhibit-redisplay t)) (condition-case e (let (file-name-handler-alist) (load (expand-file-name file (plist-get plist :path)) t 'nomessage)) ((debug doom-error) (signal (car e) (cdr e))) ((debug error) (doom--handle-load-error e (expand-file-name file (plist-get plist :path)) (plist-get plist :path)))))) (:ui . fill-column) (:flags nil :path nil))

(maphash (closure ((file . "init") t) (module plist) (let ((doom--current-module module) (doom--current-flags (plist-get plist :flags)) (inhibit-redisplay t)) (condition-case e (let (file-name-handler-alist) (load (expand-file-name file (plist-get plist :path)) t 'nomessage)) ((debug doom-error) (signal (car e) (cdr e))) ((debug error) (doom--handle-load-error e (expand-file-name file (plist-get plist :path)) (plist-get plist :path)))))) #s(hash-table size 97 test equal rehash-size 1.5 rehash-threshold 0.8125 data ((:input . chinese) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/input/chinese/") (:completion . company) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/completion/company/") (:completion . ido) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/completion/ido/") (:completion . ivy) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/completion/ivy/") (:ui . doom) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/ui/doom/") (:ui . doom-dashboard) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/ui/doom-dashboard/") (:ui . doom-quit) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/ui/doom-quit/") (:ui . fill-column) (:flags nil :path nil) (:ui . hl-todo) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/ui/hl-todo/") (:ui . indent-guides) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/ui/indent-guides/") (:ui . ligatures) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/ui/ligatures/") (:ui . minimap) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/ui/minimap/") (:ui . modeline) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/ui/modeline/") (:ui . nav-flash) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/ui/nav-flash/") (:ui . neotree) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/ui/neotree/") (:ui . ophints) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/ui/ophints/") (:ui . popup) (:flags (+defaults) :path "/Users/jflabonte/.emacs.d/modules/ui/popup/") (:ui . tabs) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/ui/tabs/") (:ui . unicode) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/ui/unicode/") (:ui . vc-gutter) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/ui/vc-gutter/") (:ui . vi-tilde-fringe) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/ui/vi-tilde-fringe/") (:ui . window-select) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/ui/window-select/") (:ui . workspaces) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/ui/workspaces/") (:editor . evil) (:flags (+everywhere) :path "/Users/jflabonte/.emacs.d/modules/editor/evil/") (:editor . file-templates) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/editor/file-templates/") (:editor . fold) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/editor/fold/") (:editor . multiple-cursors) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/editor/multiple-cursors/") (:editor . parinfer) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/editor/parinfer/") (:editor . snippets) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/editor/snippets/") (:editor . word-wrap) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/editor/word-wrap/") (:emacs . dired) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/emacs/dired/") (:emacs . electric) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/emacs/electric/") (:emacs . ibuffer) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/emacs/ibuffer/") (:emacs . undo) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/emacs/undo/") (:emacs . vc) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/emacs/vc/") (:term . term) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/term/term/") (:term . vterm) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/term/vterm/") (:checkers . syntax) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/checkers/syntax/") (:checkers . spell) (:flags (+flyspell) :path "/Users/jflabonte/.emacs.d/modules/checkers/spell/") (:checkers . grammar) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/checkers/grammar/") (:tools . ansible) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/tools/ansible/") (:tools . debugger) (:flags (+lsp) :path "/Users/jflabonte/.emacs.d/modules/tools/debugger/") (:tools . direnv) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/tools/direnv/") (:tools . docker) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/tools/docker/") (:tools . eval) (:flags (+overlay) :path "/Users/jflabonte/.emacs.d/modules/tools/eval/") (:tools . gist) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/tools/gist/") (:tools . lookup) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/tools/lookup/") (:tools . lsp) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/tools/lsp/") (:tools . magit) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/tools/magit/") (:tools . make) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/tools/make/") (:tools . pdf) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/tools/pdf/") (:tools . rgb) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/tools/rgb/") (:tools . taskrunner) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/tools/taskrunner/") (:tools . tmux) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/tools/tmux/") (:os . macos) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/os/macos/") (:os . tty) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/os/tty/") (:lang . elm) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/lang/elm/") (:lang . emacs-lisp) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/lang/emacs-lisp/") (:lang . hy) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/lang/hy/") (:lang . json) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/lang/json/") (:lang . javascript) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/lang/javascript/") (:lang . latex) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/lang/latex/") (:lang . markdown) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/lang/markdown/") (:lang . org) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/lang/org/") (:lang . python) (:flags (+lsp +pyright +pyenv) :path "/Users/jflabonte/.emacs.d/modules/lang/python/") (:lang . qt) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/lang/qt/") (:lang . rest) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/lang/rest/") (:lang . rst) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/lang/rst/") (:lang . rust) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/lang/rust/") (:lang . sh) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/lang/sh/") (:lang . web) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/lang/web/") (:lang . yaml) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/lang/yaml/") (:email . wanderlust) (:flags (+gmail) :path "/Users/jflabonte/.emacs.d/modules/email/wanderlust/") (:app . calendar) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/app/calendar/") (:app . irc) (:flags nil :path "/Users/jflabonte/.emacs.d/modules/app/irc/") (:config . default) (:flags (+bindings +smartparens) :path "/Users/jflabonte/.emacs.d/modules/config/default/"))))

(progn (if doom-debug-p (progn (let ((inhibit-message t)) (message #("DOOM Initializing user config" 0 5 (face font-lock-comment-face)))))) (maphash (doom-module-loader doom-module-init-file) doom-modules) (doom-run-hooks 'doom-before-init-modules-hook) (if no-config-p nil (maphash (doom-module-loader doom-module-config-file) doom-modules) (doom-run-hooks 'doom-init-modules-hook) (condition-case e (let (file-name-handler-alist) (load (expand-file-name "config" doom-private-dir) t 'nomessage)) ((debug doom-error) (signal (car e) (cdr e))) ((debug error) (doom--handle-load-error e (expand-file-name "config" doom-private-dir) doom-private-dir))) (if custom-file (progn (load custom-file 'noerror (not doom-debug-mode))))))

(if init-p (progn (if doom-debug-p (progn (let ((inhibit-message t)) (message #("DOOM Initializing user config" 0 5 (face font-lock-comment-face)))))) (maphash (doom-module-loader doom-module-init-file) doom-modules) (doom-run-hooks 'doom-before-init-modules-hook) (if no-config-p nil (maphash (doom-module-loader doom-module-config-file) doom-modules) (doom-run-hooks 'doom-init-modules-hook) (condition-case e (let (file-name-handler-alist) (load (expand-file-name "config" doom-private-dir) t 'nomessage)) ((debug doom-error) (signal (car e) (cdr e))) ((debug error) (doom--handle-load-error e (expand-file-name "config" doom-private-dir) doom-private-dir))) (if custom-file (progn (load custom-file 'noerror (not doom-debug-mode)))))) nil)

(let* ((init-p (and t (condition-case e (let (file-name-handler-alist) (load (expand-file-name doom-module-init-file doom-private-dir) t 'nomessage)) ((debug doom-error) (signal (car e) (cdr e))) ((debug error) (doom--handle-load-error e (expand-file-name doom-module-init-file doom-private-dir) doom-private-dir)))))) (if init-p (progn (if doom-debug-p (progn (let ((inhibit-message t)) (message #("DOOM Initializing user config" 0 5 (face font-lock-comment-face)))))) (maphash (doom-module-loader doom-module-init-file) doom-modules) (doom-run-hooks 'doom-before-init-modules-hook) (if no-config-p nil (maphash (doom-module-loader doom-module-config-file) doom-modules) (doom-run-hooks 'doom-init-modules-hook) (condition-case e (let (file-name-handler-alist) (load (expand-file-name "config" doom-private-dir) t 'nomessage)) ((debug doom-error) (signal (car e) (cdr e))) ((debug error) (doom--handle-load-error e (expand-file-name "config" doom-private-dir) doom-private-dir))) (if custom-file (progn (load custom-file 'noerror (not doom-debug-mode)))))) nil))

(progn (setq doom-init-modules-p t) (if no-config-p nil (if doom-debug-p (progn (let ((inhibit-message t)) (message #("DOOM Initializing core modules" 0 5 (face font-lock-comment-face)))))) (doom-initialize-core-modules)) (let* ((init-p (and t (condition-case e (let (file-name-handler-alist) (load (expand-file-name doom-module-init-file doom-private-dir) t 'nomessage)) ((debug doom-error) (signal (car e) (cdr e))) ((debug error) (doom--handle-load-error e (expand-file-name doom-module-init-file doom-private-dir) doom-private-dir)))))) (if init-p (progn (if doom-debug-p (progn (let ((inhibit-message t)) (message #("DOOM Initializing user config" 0 5 (face font-lock-comment-face)))))) (maphash (doom-module-loader doom-module-init-file) doom-modules) (doom-run-hooks 'doom-before-init-modules-hook) (if no-config-p nil (maphash (doom-module-loader doom-module-config-file) doom-modules) (doom-run-hooks 'doom-init-modules-hook) (condition-case e (let (file-name-handler-alist) (load (expand-file-name "config" doom-private-dir) t 'nomessage)) ((debug doom-error) (signal (car e) (cdr e))) ((debug error) (doom--handle-load-error e (expand-file-name "config" doom-private-dir) doom-private-dir))) (if custom-file (progn (load custom-file 'noerror (not doom-debug-mode)))))) nil)))

(if (or force-p (not doom-init-modules-p)) (progn (setq doom-init-modules-p t) (if no-config-p nil (if doom-debug-p (progn (let ((inhibit-message t)) (message #("DOOM Initializing core modules" 0 5 (face font-lock-comment-face)))))) (doom-initialize-core-modules)) (let* ((init-p (and t (condition-case e (let (file-name-handler-alist) (load (expand-file-name doom-module-init-file doom-private-dir) t 'nomessage)) ((debug doom-error) (signal (car e) (cdr e))) ((debug error) (doom--handle-load-error e (expand-file-name doom-module-init-file doom-private-dir) doom-private-dir)))))) (if init-p (progn (if doom-debug-p (progn (let ((inhibit-message t)) (message #("DOOM Initializing user config" 0 5 (face font-lock-comment-face)))))) (maphash (doom-module-loader doom-module-init-file) doom-modules) (doom-run-hooks 'doom-before-init-modules-hook) (if no-config-p nil (maphash (doom-module-loader doom-module-config-file) doom-modules) (doom-run-hooks 'doom-init-modules-hook) (condition-case e (let (file-name-handler-alist) (load (expand-file-name "config" doom-private-dir) t 'nomessage)) ((debug doom-error) (signal (car e) (cdr e))) ((debug error) (doom--handle-load-error e (expand-file-name "config" doom-private-dir) doom-private-dir))) (if custom-file (progn (load custom-file 'noerror (not doom-debug-mode)))))) nil))))

(doom-initialize-modules force no-config)

(let ((default-directory doom-emacs-dir)) (if noconfig-p (doom--print (doom--format (format (doom--output-class 'warn "Not copying private config template, as requested")))) (if (and (not (file-directory-p doom-private-dir)) (not (getenv "DOOMDIR"))) (progn (let ((xdg-config-dir (or (getenv "XDG_CONFIG_HOME") "~/.config"))) (if (file-in-directory-p doom-emacs-dir xdg-config-dir) (progn (setq doom-private-dir (expand-file-name "doom/" xdg-config-dir))))))) (doom--print (doom--format (format (doom--output-class 'start "Creating %s") (doom--output-class 'relpath doom-private-dir)))) (make-directory doom-private-dir 'parents) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (doom--print (doom--format (format (doom--output-class 'success "Created %s") (doom--output-class 'relpath doom-private-dir))))) (mapc #'(lambda (file) (let* ((template file) (filename (if template (car-safe (prog1 template (setq template (cdr template)))) (signal 'wrong-number-of-arguments (list '(filename . template) (length template)))))) (if (let ((p (let ((file filename)) (and (stringp file) (let ((default-directory doom-private-dir)) (file-exists-p file)) file)))) (and p (expand-file-name p doom-private-dir))) (doom--print (doom--format (format (doom--output-class 'warn "%s already exists, skipping") filename))) (doom--print (doom--format (format (doom--output-class 'info "Creating %s%s") (doom--output-class 'relpath doom-private-dir) filename))) (let ((temp-file (doom-path doom-private-dir filename)) (temp-buffer (generate-new-buffer " *temp file*" t))) (unwind-protect (prog1 (save-current-buffer (set-buffer temp-buffer) (insert-file-contents template)) (save-current-buffer (set-buffer temp-buffer) (write-region nil nil temp-file nil 0))) (and (buffer-name temp-buffer) (kill-buffer temp-buffer)))) (doom--print (doom--format (format (doom--output-class 'success "Done!"))))))) (list (cons "init.el" (doom-path doom-emacs-dir "init.example.el")) (cons "config.el" (doom-path doom-core-dir "templates/config.example.el")) (cons "packages.el" (doom-path doom-core-dir "templates/packages.example.el"))))) (doom-initialize-modules 'force 'no-config) (if noenv-p (doom--print (doom--format (format (doom--output-class 'warn "Not generating envvars file, as requested")))) (if (file-exists-p doom-env-file) (doom--print (doom--format (format (doom--output-class 'info "Envvar file already exists, skipping")))) (if (or doom-auto-accept (y-or-n-p "Generate an envvar file? (see `doom help env` for details)")) (progn (doom-cli-reload-env-file 'force-p))))) (if noinstall-p (doom--print (doom--format (format (doom--output-class 'warn "Not installing plugins, as requested")))) (doom--print (doom--format (format "Installing plugins"))) (doom-cli-packages-install)) (doom--print (doom--format (format "Regenerating autoloads files"))) (doom-autoloads-reload) (if nohooks-p (doom--print (doom--format (format (doom--output-class 'warn "Not deploying commit-msg and pre-push git hooks, as requested")))) (doom--print (doom--format (format "Deploying commit-msg and pre-push git hooks"))) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (condition-case e (doom-cli--ci-deploy-hooks doom-auto-accept) ('user-error (doom--print (doom--format (format (doom--output-class 'warn "%s") (error-message-string e)))))))) (cond (nofonts-p) (IS-WINDOWS (doom--print (doom--format (format (doom--output-class 'warn "Doom cannot install all-the-icons' fonts on Windows!\n")))) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (doom--print (doom--format (format (concat "You'll have to do so manually:\n\n" "  1. Launch Doom Emacs\n" "  2. Execute 'M-x all-the-icons-install-fonts' to download the fonts\n" "  3. Open the download location in windows explorer\n" "  4. Open each font file to install them")))))) ((or doom-auto-accept (y-or-n-p "Download and install all-the-icon's fonts?")) (require 'all-the-icons) (let ((window-system (cond (IS-MAC 'ns) (IS-LINUX 'x)))) (all-the-icons-install-fonts 'yes)))) (if (file-exists-p "~/.emacs") (progn (doom--print (doom--format (format (doom--output-class 'warn "A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))) (doom--print (doom--format (format (doom--output-class 'success "\nFinished! Doom is ready to go!\n")))) (let ((temp-buffer (generate-new-buffer " *temp*" t))) (save-current-buffer (set-buffer temp-buffer) (unwind-protect (progn (insert-file-contents (doom-path doom-core-dir "templates/QUICKSTART_INTRO")) (doom--print (doom--format (format "%s" (buffer-string))))) (and (buffer-name temp-buffer) (kill-buffer temp-buffer))))))

(let ((noconfig-p (cdr (assq 'noconfig-p --alist--))) (noenv-p (cdr (assq 'noenv-p --alist--))) (noinstall-p (cdr (assq 'noinstall-p --alist--))) (nofonts-p (cdr (assq 'nofonts-p --alist--))) (nohooks-p (cdr (assq 'nohooks-p --alist--)))) (doom--print (doom--format (format (doom--output-color 'green "Installing Doom Emacs!\n")))) (let ((default-directory doom-emacs-dir)) (if noconfig-p (doom--print (doom--format (format (doom--output-class 'warn "Not copying private config template, as requested")))) (if (and (not (file-directory-p doom-private-dir)) (not (getenv "DOOMDIR"))) (progn (let ((xdg-config-dir (or (getenv "XDG_CONFIG_HOME") "~/.config"))) (if (file-in-directory-p doom-emacs-dir xdg-config-dir) (progn (setq doom-private-dir (expand-file-name "doom/" xdg-config-dir))))))) (doom--print (doom--format (format (doom--output-class 'start "Creating %s") (doom--output-class 'relpath doom-private-dir)))) (make-directory doom-private-dir 'parents) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (doom--print (doom--format (format (doom--output-class 'success "Created %s") (doom--output-class 'relpath doom-private-dir))))) (mapc #'(lambda (file) (let* ((template file) (filename (if template (car-safe (prog1 template (setq template (cdr template)))) (signal 'wrong-number-of-arguments (list '(filename . template) (length template)))))) (if (let ((p (let ((file filename)) (and (stringp file) (let ((default-directory doom-private-dir)) (file-exists-p file)) file)))) (and p (expand-file-name p doom-private-dir))) (doom--print (doom--format (format (doom--output-class 'warn "%s already exists, skipping") filename))) (doom--print (doom--format (format (doom--output-class 'info "Creating %s%s") (doom--output-class 'relpath doom-private-dir) filename))) (let ((temp-file (doom-path doom-private-dir filename)) (temp-buffer (generate-new-buffer " *temp file*" t))) (unwind-protect (prog1 (save-current-buffer (set-buffer temp-buffer) (insert-file-contents template)) (save-current-buffer (set-buffer temp-buffer) (write-region nil nil temp-file nil 0))) (and (buffer-name temp-buffer) (kill-buffer temp-buffer)))) (doom--print (doom--format (format (doom--output-class 'success "Done!"))))))) (list (cons "init.el" (doom-path doom-emacs-dir "init.example.el")) (cons "config.el" (doom-path doom-core-dir "templates/config.example.el")) (cons "packages.el" (doom-path doom-core-dir "templates/packages.example.el"))))) (doom-initialize-modules 'force 'no-config) (if noenv-p (doom--print (doom--format (format (doom--output-class 'warn "Not generating envvars file, as requested")))) (if (file-exists-p doom-env-file) (doom--print (doom--format (format (doom--output-class 'info "Envvar file already exists, skipping")))) (if (or doom-auto-accept (y-or-n-p "Generate an envvar file? (see `doom help env` for details)")) (progn (doom-cli-reload-env-file 'force-p))))) (if noinstall-p (doom--print (doom--format (format (doom--output-class 'warn "Not installing plugins, as requested")))) (doom--print (doom--format (format "Installing plugins"))) (doom-cli-packages-install)) (doom--print (doom--format (format "Regenerating autoloads files"))) (doom-autoloads-reload) (if nohooks-p (doom--print (doom--format (format (doom--output-class 'warn "Not deploying commit-msg and pre-push git hooks, as requested")))) (doom--print (doom--format (format "Deploying commit-msg and pre-push git hooks"))) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (condition-case e (doom-cli--ci-deploy-hooks doom-auto-accept) ('user-error (doom--print (doom--format (format (doom--output-class 'warn "%s") (error-message-string e)))))))) (cond (nofonts-p) (IS-WINDOWS (doom--print (doom--format (format (doom--output-class 'warn "Doom cannot install all-the-icons' fonts on Windows!\n")))) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (doom--print (doom--format (format (concat "You'll have to do so manually:\n\n" "  1. Launch Doom Emacs\n" "  2. Execute 'M-x all-the-icons-install-fonts' to download the fonts\n" "  3. Open the download location in windows explorer\n" "  4. Open each font file to install them")))))) ((or doom-auto-accept (y-or-n-p "Download and install all-the-icon's fonts?")) (require 'all-the-icons) (let ((window-system (cond (IS-MAC 'ns) (IS-LINUX 'x)))) (all-the-icons-install-fonts 'yes)))) (if (file-exists-p "~/.emacs") (progn (doom--print (doom--format (format (doom--output-class 'warn "A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))) (doom--print (doom--format (format (doom--output-class 'success "\nFinished! Doom is ready to go!\n")))) (let ((temp-buffer (generate-new-buffer " *temp*" t))) (save-current-buffer (set-buffer temp-buffer) (unwind-protect (progn (insert-file-contents (doom-path doom-core-dir "templates/QUICKSTART_INTRO")) (doom--print (doom--format (format "%s" (buffer-string))))) (and (buffer-name temp-buffer) (kill-buffer temp-buffer)))))))

((closure ((plist) (aliases i) (name . install) t) (--alist--) (ignore --alist--) (let ((noconfig-p (cdr (assq 'noconfig-p --alist--))) (noenv-p (cdr (assq 'noenv-p --alist--))) (noinstall-p (cdr (assq 'noinstall-p --alist--))) (nofonts-p (cdr (assq 'nofonts-p --alist--))) (nohooks-p (cdr (assq 'nohooks-p --alist--)))) (doom--print (doom--format (format (doom--output-color 'green "Installing Doom Emacs!\n")))) (let ((default-directory doom-emacs-dir)) (if noconfig-p (doom--print (doom--format (format (doom--output-class 'warn "Not copying private config template, as requested")))) (if (and (not (file-directory-p doom-private-dir)) (not (getenv "DOOMDIR"))) (progn (let ((xdg-config-dir (or (getenv "XDG_CONFIG_HOME") "~/.config"))) (if (file-in-directory-p doom-emacs-dir xdg-config-dir) (progn (setq doom-private-dir (expand-file-name "doom/" xdg-config-dir))))))) (doom--print (doom--format (format (doom--output-class 'start "Creating %s") (doom--output-class 'relpath doom-private-dir)))) (make-directory doom-private-dir 'parents) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (doom--print (doom--format (format (doom--output-class 'success "Created %s") (doom--output-class 'relpath doom-private-dir))))) (mapc #'(lambda (file) (let* ((template file) (filename (if template (car-safe (prog1 template (setq template (cdr template)))) (signal 'wrong-number-of-arguments (list '(filename . template) (length template)))))) (if (let ((p (let ((file filename)) (and (stringp file) (let ((default-directory doom-private-dir)) (file-exists-p file)) file)))) (and p (expand-file-name p doom-private-dir))) (doom--print (doom--format (format (doom--output-class 'warn "%s already exists, skipping") filename))) (doom--print (doom--format (format (doom--output-class 'info "Creating %s%s") (doom--output-class 'relpath doom-private-dir) filename))) (let ((temp-file (doom-path doom-private-dir filename)) (temp-buffer (generate-new-buffer " *temp file*" t))) (unwind-protect (prog1 (save-current-buffer (set-buffer temp-buffer) (insert-file-contents template)) (save-current-buffer (set-buffer temp-buffer) (write-region nil nil temp-file nil 0))) (and (buffer-name temp-buffer) (kill-buffer temp-buffer)))) (doom--print (doom--format (format (doom--output-class 'success "Done!"))))))) (list (cons "init.el" (doom-path doom-emacs-dir "init.example.el")) (cons "config.el" (doom-path doom-core-dir "templates/config.example.el")) (cons "packages.el" (doom-path doom-core-dir "templates/packages.example.el"))))) (doom-initialize-modules 'force 'no-config) (if noenv-p (doom--print (doom--format (format (doom--output-class 'warn "Not generating envvars file, as requested")))) (if (file-exists-p doom-env-file) (doom--print (doom--format (format (doom--output-class 'info "Envvar file already exists, skipping")))) (if (or doom-auto-accept (y-or-n-p "Generate an envvar file? (see `doom help env` for details)")) (progn (doom-cli-reload-env-file 'force-p))))) (if noinstall-p (doom--print (doom--format (format (doom--output-class 'warn "Not installing plugins, as requested")))) (doom--print (doom--format (format "Installing plugins"))) (doom-cli-packages-install)) (doom--print (doom--format (format "Regenerating autoloads files"))) (doom-autoloads-reload) (if nohooks-p (doom--print (doom--format (format (doom--output-class 'warn "Not deploying commit-msg and pre-push git hooks, as requested")))) (doom--print (doom--format (format "Deploying commit-msg and pre-push git hooks"))) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (condition-case e (doom-cli--ci-deploy-hooks doom-auto-accept) ('user-error (doom--print (doom--format (format (doom--output-class 'warn "%s") (error-message-string e)))))))) (cond (nofonts-p) (IS-WINDOWS (doom--print (doom--format (format (doom--output-class 'warn "Doom cannot install all-the-icons' fonts on Windows!\n")))) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (doom--print (doom--format (format (concat "You'll have to do so manually:\n\n" "  1. Launch Doom Emacs\n" "  2. Execute 'M-x all-the-icons-install-fonts' to download the fonts\n" "  3. Open the download location in windows explorer\n" "  4. Open each font file to install them")))))) ((or doom-auto-accept (y-or-n-p "Download and install all-the-icon's fonts?")) (require 'all-the-icons) (let ((window-system (cond (IS-MAC 'ns) (IS-LINUX 'x)))) (all-the-icons-install-fonts 'yes)))) (if (file-exists-p "~/.emacs") (progn (doom--print (doom--format (format (doom--output-class 'warn "A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))) (doom--print (doom--format (format (doom--output-class 'success "\nFinished! Doom is ready to go!\n")))) (let ((temp-buffer (generate-new-buffer " *temp*" t))) (save-current-buffer (set-buffer temp-buffer) (unwind-protect (progn (insert-file-contents (doom-path doom-core-dir "templates/QUICKSTART_INTRO")) (doom--print (doom--format (format "%s" (buffer-string))))) (and (buffer-name temp-buffer) (kill-buffer temp-buffer)))))))) nil)

(funcall (closure ((plist) (aliases i) (name . install) t) (--alist--) (ignore --alist--) (let ((noconfig-p (cdr (assq 'noconfig-p --alist--))) (noenv-p (cdr (assq 'noenv-p --alist--))) (noinstall-p (cdr (assq 'noinstall-p --alist--))) (nofonts-p (cdr (assq 'nofonts-p --alist--))) (nohooks-p (cdr (assq 'nohooks-p --alist--)))) (doom--print (doom--format (format (doom--output-color 'green "Installing Doom Emacs!\n")))) (let ((default-directory doom-emacs-dir)) (if noconfig-p (doom--print (doom--format (format (doom--output-class 'warn "Not copying private config template, as requested")))) (if (and (not (file-directory-p doom-private-dir)) (not (getenv "DOOMDIR"))) (progn (let ((xdg-config-dir (or (getenv "XDG_CONFIG_HOME") "~/.config"))) (if (file-in-directory-p doom-emacs-dir xdg-config-dir) (progn (setq doom-private-dir (expand-file-name "doom/" xdg-config-dir))))))) (doom--print (doom--format (format (doom--output-class 'start "Creating %s") (doom--output-class 'relpath doom-private-dir)))) (make-directory doom-private-dir 'parents) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (doom--print (doom--format (format (doom--output-class 'success "Created %s") (doom--output-class 'relpath doom-private-dir))))) (mapc #'(lambda (file) (let* ((template file) (filename (if template (car-safe (prog1 template (setq template (cdr template)))) (signal 'wrong-number-of-arguments (list '(filename . template) (length template)))))) (if (let ((p (let ((file filename)) (and (stringp file) (let ((default-directory doom-private-dir)) (file-exists-p file)) file)))) (and p (expand-file-name p doom-private-dir))) (doom--print (doom--format (format (doom--output-class 'warn "%s already exists, skipping") filename))) (doom--print (doom--format (format (doom--output-class 'info "Creating %s%s") (doom--output-class 'relpath doom-private-dir) filename))) (let ((temp-file (doom-path doom-private-dir filename)) (temp-buffer (generate-new-buffer " *temp file*" t))) (unwind-protect (prog1 (save-current-buffer (set-buffer temp-buffer) (insert-file-contents template)) (save-current-buffer (set-buffer temp-buffer) (write-region nil nil temp-file nil 0))) (and (buffer-name temp-buffer) (kill-buffer temp-buffer)))) (doom--print (doom--format (format (doom--output-class 'success "Done!"))))))) (list (cons "init.el" (doom-path doom-emacs-dir "init.example.el")) (cons "config.el" (doom-path doom-core-dir "templates/config.example.el")) (cons "packages.el" (doom-path doom-core-dir "templates/packages.example.el"))))) (doom-initialize-modules 'force 'no-config) (if noenv-p (doom--print (doom--format (format (doom--output-class 'warn "Not generating envvars file, as requested")))) (if (file-exists-p doom-env-file) (doom--print (doom--format (format (doom--output-class 'info "Envvar file already exists, skipping")))) (if (or doom-auto-accept (y-or-n-p "Generate an envvar file? (see `doom help env` for details)")) (progn (doom-cli-reload-env-file 'force-p))))) (if noinstall-p (doom--print (doom--format (format (doom--output-class 'warn "Not installing plugins, as requested")))) (doom--print (doom--format (format "Installing plugins"))) (doom-cli-packages-install)) (doom--print (doom--format (format "Regenerating autoloads files"))) (doom-autoloads-reload) (if nohooks-p (doom--print (doom--format (format (doom--output-class 'warn "Not deploying commit-msg and pre-push git hooks, as requested")))) (doom--print (doom--format (format "Deploying commit-msg and pre-push git hooks"))) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (condition-case e (doom-cli--ci-deploy-hooks doom-auto-accept) ('user-error (doom--print (doom--format (format (doom--output-class 'warn "%s") (error-message-string e)))))))) (cond (nofonts-p) (IS-WINDOWS (doom--print (doom--format (format (doom--output-class 'warn "Doom cannot install all-the-icons' fonts on Windows!\n")))) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (doom--print (doom--format (format (concat "You'll have to do so manually:\n\n" "  1. Launch Doom Emacs\n" "  2. Execute 'M-x all-the-icons-install-fonts' to download the fonts\n" "  3. Open the download location in windows explorer\n" "  4. Open each font file to install them")))))) ((or doom-auto-accept (y-or-n-p "Download and install all-the-icon's fonts?")) (require 'all-the-icons) (let ((window-system (cond (IS-MAC 'ns) (IS-LINUX 'x)))) (all-the-icons-install-fonts 'yes)))) (if (file-exists-p "~/.emacs") (progn (doom--print (doom--format (format (doom--output-class 'warn "A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))) (doom--print (doom--format (format (doom--output-class 'success "\nFinished! Doom is ready to go!\n")))) (let ((temp-buffer (generate-new-buffer " *temp*" t))) (save-current-buffer (set-buffer temp-buffer) (unwind-protect (progn (insert-file-contents (doom-path doom-core-dir "templates/QUICKSTART_INTRO")) (doom--print (doom--format (format "%s" (buffer-string))))) (and (buffer-name temp-buffer) (kill-buffer temp-buffer)))))))) nil)

(if cli (funcall (progn (or (progn (and (memq (type-of cli) cl-struct-doom-cli-tags) t)) (signal 'wrong-type-argument (list 'doom-cli cli))) (aref cli 7)) (doom--cli-process cli (remq nil args))) (user-error "Couldn't find any %S command" command))

(let* ((cli (and t (doom-cli-get command)))) (if cli (funcall (progn (or (progn (and (memq (type-of cli) cl-struct-doom-cli-tags) t)) (signal 'wrong-type-argument (list 'doom-cli cli))) (aref cli 7)) (doom--cli-process cli (remq nil args))) (user-error "Couldn't find any %S command" command)))

(doom-cli-execute "install")

(apply doom-cli-execute "install" nil)

(and t (apply #'doom-cli-execute command args))

(let* ((result (and t (apply #'doom-cli-execute command args)))) (if result (progn (run-hooks 'doom-cli-post-hook) (doom--print (doom--format (format (doom--output-class 'success "Finished in %s") (let* ((duration (float-time (time-subtract (current-time) before-init-time))) (hours (/ (truncate duration) 60 60)) (minutes (- (/ (truncate duration) 60) (* hours 60))) (seconds (- duration (* hours 60 60) (* minutes 60)))) (string-join (delq nil (list (if (= 0 hours) nil (format "%dh" hours)) (if (= 0 minutes) nil (format "%dm" minutes)) (format (if (> duration 60) "%ds" "%.4fs") seconds)))))))) result) nil))

(let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (let* ((result (and t (apply #'doom-cli-execute command args)))) (if result (progn (run-hooks 'doom-cli-post-hook) (doom--print (doom--format (format (doom--output-class 'success "Finished in %s") (let* ((duration (float-time (time-subtract (current-time) before-init-time))) (hours (/ (truncate duration) 60 60)) (minutes (- (/ (truncate duration) 60) (* hours 60))) (seconds (- duration (* hours 60 60) (* minutes 60)))) (string-join (delq nil (list (if (= 0 hours) nil (format "%dh" hours)) (if (= 0 minutes) nil (format "%dm" minutes)) (format (if (> duration 60) "%ds" "%.4fs") seconds)))))))) result) nil)))

(let ((start-time (current-time))) (run-hooks 'doom-cli-pre-hook) (if (getenv "__DOOMRESTART") nil (doom--print (doom--format (format (doom--output-class 'start "Executing 'doom %s' with Emacs %s at %s") (string-join (cons (or (condition-case nil (progn (let ((cl-x (doom-cli-get command))) (progn (or (progn (and (memq (type-of cl-x) cl-struct-doom-cli-tags) t)) (signal 'wrong-type-argument (list 'doom-cli cl-x))) (aref cl-x 1)))) (error nil)) command) args) " ") emacs-version (format-time-string "%Y-%m-%d %H:%M:%S"))))) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (let* ((result (and t (apply #'doom-cli-execute command args)))) (if result (progn (run-hooks 'doom-cli-post-hook) (doom--print (doom--format (format (doom--output-class 'success "Finished in %s") (let* ((duration (float-time (time-subtract (current-time) before-init-time))) (hours (/ (truncate duration) 60 60)) (minutes (- (/ (truncate duration) 60) (* hours 60))) (seconds (- duration (* hours 60 60) (* minutes 60)))) (string-join (delq nil (list (if (= 0 hours) nil (format "%dh" hours)) (if (= 0 minutes) nil (format "%dm" minutes)) (format (if (> duration 60) "%ds" "%.4fs") seconds)))))))) result) nil))))

(if (null command) (doom-cli-execute "help") (let ((start-time (current-time))) (run-hooks 'doom-cli-pre-hook) (if (getenv "__DOOMRESTART") nil (doom--print (doom--format (format (doom--output-class 'start "Executing 'doom %s' with Emacs %s at %s") (string-join (cons (or (condition-case nil (progn (let ((cl-x (doom-cli-get command))) (progn (or (progn (and (memq (type-of cl-x) cl-struct-doom-cli-tags) t)) (signal 'wrong-type-argument (list 'doom-cli cl-x))) (aref cl-x 1)))) (error nil)) command) args) " ") emacs-version (format-time-string "%Y-%m-%d %H:%M:%S"))))) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (let* ((result (and t (apply #'doom-cli-execute command args)))) (if result (progn (run-hooks 'doom-cli-post-hook) (doom--print (doom--format (format (doom--output-class 'success "Finished in %s") (let* ((duration (float-time (time-subtract (current-time) before-init-time))) (hours (/ (truncate duration) 60 60)) (minutes (- (/ (truncate duration) 60) (* hours 60))) (seconds (- duration (* hours 60 60) (* minutes 60)))) (string-join (delq nil (list (if (= 0 hours) nil (format "%dh" hours)) (if (= 0 minutes) nil (format "%dm" minutes)) (format (if (> duration 60) "%ds" "%.4fs") seconds)))))))) result) nil)))))

(cons t (if (null command) (doom-cli-execute "help") (let ((start-time (current-time))) (run-hooks 'doom-cli-pre-hook) (if (getenv "__DOOMRESTART") nil (doom--print (doom--format (format (doom--output-class 'start "Executing 'doom %s' with Emacs %s at %s") (string-join (cons (or (condition-case nil (progn (let ((cl-x (doom-cli-get command))) (progn (or (progn (and (memq (type-of cl-x) cl-struct-doom-cli-tags) t)) (signal 'wrong-type-argument (list 'doom-cli cl-x))) (aref cl-x 1)))) (error nil)) command) args) " ") emacs-version (format-time-string "%Y-%m-%d %H:%M:%S"))))) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (let* ((result (and t (apply #'doom-cli-execute command args)))) (if result (progn (run-hooks 'doom-cli-post-hook) (doom--print (doom--format (format (doom--output-class 'success "Finished in %s") (let* ((duration (float-time (time-subtract (current-time) before-init-time))) (hours (/ (truncate duration) 60 60)) (minutes (- (/ (truncate duration) 60) (* hours 60))) (seconds (- duration (* hours 60 60) (* minutes 60)))) (string-join (delq nil (list (if (= 0 hours) nil (format "%dh" hours)) (if (= 0 minutes) nil (format "%dm" minutes)) (format (if (> duration 60) "%ds" "%.4fs") seconds)))))))) result) nil))))))

(catch 'exit (if (and (not (getenv "__DOOMRESTART")) (or doomdir localdir debug-p auto-accept-p)) (progn (if doomdir (progn (setenv "DOOMDIR" (file-name-as-directory doomdir)) (doom--print (doom--format (format (doom--output-class 'info "DOOMDIR=%s") doomdir))))) (if localdir (progn (setenv "DOOMLOCALDIR" (file-name-as-directory localdir)) (doom--print (doom--format (format (doom--output-class 'info "DOOMLOCALDIR=%s") localdir))))) (if debug-p (progn (setenv "DEBUG" "1") (doom--print (doom--format (format (doom--output-class 'info "DEBUG=1")))))) (if auto-accept-p (progn (setenv "YES" auto-accept-p) (doom--print (doom--format (format (doom--output-class 'info "Confirmations auto-accept enabled")))))) (throw 'exit "__DOOMRESTART=1 $@"))) (if loadfile (progn (load (doom-path loadfile) nil t t))) (if help-p (progn (if command (progn (setq args (cons command args)))) (setq command "help"))) (cons t (if (null command) (doom-cli-execute "help") (let ((start-time (current-time))) (run-hooks 'doom-cli-pre-hook) (if (getenv "__DOOMRESTART") nil (doom--print (doom--format (format (doom--output-class 'start "Executing 'doom %s' with Emacs %s at %s") (string-join (cons (or (condition-case nil (progn (let ((cl-x (doom-cli-get command))) (progn (or (progn (and (memq (type-of cl-x) cl-struct-doom-cli-tags) t)) (signal 'wrong-type-argument (list 'doom-cli cl-x))) (aref cl-x 1)))) (error nil)) command) args) " ") emacs-version (format-time-string "%Y-%m-%d %H:%M:%S"))))) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (let* ((result (and t (apply #'doom-cli-execute command args)))) (if result (progn (run-hooks 'doom-cli-post-hook) (doom--print (doom--format (format (doom--output-class 'success "Finished in %s") (let* ((duration (float-time (time-subtract (current-time) before-init-time))) (hours (/ (truncate duration) 60 60)) (minutes (- (/ (truncate duration) 60) (* hours 60))) (seconds (- duration (* hours 60 60) (* minutes 60)))) (string-join (delq nil (list (if (= 0 hours) nil (format "%dh" hours)) (if (= 0 minutes) nil (format "%dm" minutes)) (format (if (> duration 60) "%ds" "%.4fs") seconds)))))))) result) nil)))))))

(progn (if nocolor (progn (setq doom-output-backend nil))) (catch 'exit (if (and (not (getenv "__DOOMRESTART")) (or doomdir localdir debug-p auto-accept-p)) (progn (if doomdir (progn (setenv "DOOMDIR" (file-name-as-directory doomdir)) (doom--print (doom--format (format (doom--output-class 'info "DOOMDIR=%s") doomdir))))) (if localdir (progn (setenv "DOOMLOCALDIR" (file-name-as-directory localdir)) (doom--print (doom--format (format (doom--output-class 'info "DOOMLOCALDIR=%s") localdir))))) (if debug-p (progn (setenv "DEBUG" "1") (doom--print (doom--format (format (doom--output-class 'info "DEBUG=1")))))) (if auto-accept-p (progn (setenv "YES" auto-accept-p) (doom--print (doom--format (format (doom--output-class 'info "Confirmations auto-accept enabled")))))) (throw 'exit "__DOOMRESTART=1 $@"))) (if loadfile (progn (load (doom-path loadfile) nil t t))) (if help-p (progn (if command (progn (setq args (cons command args)))) (setq command "help"))) (cons t (if (null command) (doom-cli-execute "help") (let ((start-time (current-time))) (run-hooks 'doom-cli-pre-hook) (if (getenv "__DOOMRESTART") nil (doom--print (doom--format (format (doom--output-class 'start "Executing 'doom %s' with Emacs %s at %s") (string-join (cons (or (condition-case nil (progn (let ((cl-x (doom-cli-get command))) (progn (or (progn (and (memq (type-of cl-x) cl-struct-doom-cli-tags) t)) (signal 'wrong-type-argument (list 'doom-cli cl-x))) (aref cl-x 1)))) (error nil)) command) args) " ") emacs-version (format-time-string "%Y-%m-%d %H:%M:%S"))))) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (let* ((result (and t (apply #'doom-cli-execute command args)))) (if result (progn (run-hooks 'doom-cli-post-hook) (doom--print (doom--format (format (doom--output-class 'success "Finished in %s") (let* ((duration (float-time (time-subtract (current-time) before-init-time))) (hours (/ (truncate duration) 60 60)) (minutes (- (/ (truncate duration) 60) (* hours 60))) (seconds (- duration (* hours 60 60) (* minutes 60)))) (string-join (delq nil (list (if (= 0 hours) nil (format "%dh" hours)) (if (= 0 minutes) nil (format "%dm" minutes)) (format (if (> duration 60) "%ds" "%.4fs") seconds)))))))) result) nil))))))))

(unwind-protect (progn (if nocolor (progn (setq doom-output-backend nil))) (catch 'exit (if (and (not (getenv "__DOOMRESTART")) (or doomdir localdir debug-p auto-accept-p)) (progn (if doomdir (progn (setenv "DOOMDIR" (file-name-as-directory doomdir)) (doom--print (doom--format (format (doom--output-class 'info "DOOMDIR=%s") doomdir))))) (if localdir (progn (setenv "DOOMLOCALDIR" (file-name-as-directory localdir)) (doom--print (doom--format (format (doom--output-class 'info "DOOMLOCALDIR=%s") localdir))))) (if debug-p (progn (setenv "DEBUG" "1") (doom--print (doom--format (format (doom--output-class 'info "DEBUG=1")))))) (if auto-accept-p (progn (setenv "YES" auto-accept-p) (doom--print (doom--format (format (doom--output-class 'info "Confirmations auto-accept enabled")))))) (throw 'exit "__DOOMRESTART=1 $@"))) (if loadfile (progn (load (doom-path loadfile) nil t t))) (if help-p (progn (if command (progn (setq args (cons command args)))) (setq command "help"))) (cons t (if (null command) (doom-cli-execute "help") (let ((start-time (current-time))) (run-hooks 'doom-cli-pre-hook) (if (getenv "__DOOMRESTART") nil (doom--print (doom--format (format (doom--output-class 'start "Executing 'doom %s' with Emacs %s at %s") (string-join (cons (or (condition-case nil (progn (let ((cl-x (doom-cli-get command))) (progn (or (progn (and (memq (type-of cl-x) cl-struct-doom-cli-tags) t)) (signal 'wrong-type-argument (list 'doom-cli cl-x))) (aref cl-x 1)))) (error nil)) command) args) " ") emacs-version (format-time-string "%Y-%m-%d %H:%M:%S"))))) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (let* ((result (and t (apply #'doom-cli-execute command args)))) (if result (progn (run-hooks 'doom-cli-post-hook) (doom--print (doom--format (format (doom--output-class 'success "Finished in %s") (let* ((duration (float-time (time-subtract (current-time) before-init-time))) (hours (/ (truncate duration) 60 60)) (minutes (- (/ (truncate duration) 60) (* hours 60))) (seconds (- duration (* hours 60 60) (* minutes 60)))) (string-join (delq nil (list (if (= 0 hours) nil (format "%dh" hours)) (if (= 0 minutes) nil (format "%dm" minutes)) (format (if (> duration 60) "%ds" "%.4fs") seconds)))))))) result) nil)))))))) (save-current-buffer (set-buffer log-buffer) (require 'ansi-color) (ansi-color-filter-region (point-min) (point-max))) (let ((dest doom--cli-log-buffer)) (cond ((bufferp dest) (save-current-buffer (set-buffer dest) (insert-buffer-substring log-buffer))) ((stringp dest) (make-directory (file-name-directory dest) 'parents) (let ((temp-file dest) (temp-buffer (generate-new-buffer " *temp file*" t))) (unwind-protect (prog1 (save-current-buffer (set-buffer temp-buffer) (insert-buffer-substring log-buffer)) (save-current-buffer (set-buffer temp-buffer) (write-region nil nil temp-file nil 0))) (and (buffer-name temp-buffer) (kill-buffer temp-buffer)))))) (kill-buffer log-buffer)))

(progn (fset #'message vnew) (unwind-protect (progn (if nocolor (progn (setq doom-output-backend nil))) (catch 'exit (if (and (not (getenv "__DOOMRESTART")) (or doomdir localdir debug-p auto-accept-p)) (progn (if doomdir (progn (setenv "DOOMDIR" (file-name-as-directory doomdir)) (doom--print (doom--format (format (doom--output-class 'info "DOOMDIR=%s") doomdir))))) (if localdir (progn (setenv "DOOMLOCALDIR" (file-name-as-directory localdir)) (doom--print (doom--format (format (doom--output-class 'info "DOOMLOCALDIR=%s") localdir))))) (if debug-p (progn (setenv "DEBUG" "1") (doom--print (doom--format (format (doom--output-class 'info "DEBUG=1")))))) (if auto-accept-p (progn (setenv "YES" auto-accept-p) (doom--print (doom--format (format (doom--output-class 'info "Confirmations auto-accept enabled")))))) (throw 'exit "__DOOMRESTART=1 $@"))) (if loadfile (progn (load (doom-path loadfile) nil t t))) (if help-p (progn (if command (progn (setq args (cons command args)))) (setq command "help"))) (cons t (if (null command) (doom-cli-execute "help") (let ((start-time (current-time))) (run-hooks 'doom-cli-pre-hook) (if (getenv "__DOOMRESTART") nil (doom--print (doom--format (format (doom--output-class 'start "Executing 'doom %s' with Emacs %s at %s") (string-join (cons (or (condition-case nil (progn (let ((cl-x (doom-cli-get command))) (progn (or (progn (and (memq (type-of cl-x) cl-struct-doom-cli-tags) t)) (signal 'wrong-type-argument (list 'doom-cli cl-x))) (aref cl-x 1)))) (error nil)) command) args) " ") emacs-version (format-time-string "%Y-%m-%d %H:%M:%S"))))) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (let* ((result (and t (apply #'doom-cli-execute command args)))) (if result (progn (run-hooks 'doom-cli-post-hook) (doom--print (doom--format (format (doom--output-class 'success "Finished in %s") (let* ((duration (float-time (time-subtract (current-time) before-init-time))) (hours (/ (truncate duration) 60 60)) (minutes (- (/ (truncate duration) 60) (* hours 60))) (seconds (- duration (* hours 60 60) (* minutes 60)))) (string-join (delq nil (list (if (= 0 hours) nil (format "%dh" hours)) (if (= 0 minutes) nil (format "%dm" minutes)) (format (if (> duration 60) "%ds" "%.4fs") seconds)))))))) result) nil)))))))) (save-current-buffer (set-buffer log-buffer) (require 'ansi-color) (ansi-color-filter-region (point-min) (point-max))) (let ((dest doom--cli-log-buffer)) (cond ((bufferp dest) (save-current-buffer (set-buffer dest) (insert-buffer-substring log-buffer))) ((stringp dest) (make-directory (file-name-directory dest) 'parents) (let ((temp-file dest) (temp-buffer (generate-new-buffer " *temp file*" t))) (unwind-protect (prog1 (save-current-buffer (set-buffer temp-buffer) (insert-buffer-substring log-buffer)) (save-current-buffer (set-buffer temp-buffer) (write-region nil nil temp-file nil 0))) (and (buffer-name temp-buffer) (kill-buffer temp-buffer)))))) (kill-buffer log-buffer))))

(unwind-protect (progn (fset #'message vnew) (unwind-protect (progn (if nocolor (progn (setq doom-output-backend nil))) (catch 'exit (if (and (not (getenv "__DOOMRESTART")) (or doomdir localdir debug-p auto-accept-p)) (progn (if doomdir (progn (setenv "DOOMDIR" (file-name-as-directory doomdir)) (doom--print (doom--format (format (doom--output-class 'info "DOOMDIR=%s") doomdir))))) (if localdir (progn (setenv "DOOMLOCALDIR" (file-name-as-directory localdir)) (doom--print (doom--format (format (doom--output-class 'info "DOOMLOCALDIR=%s") localdir))))) (if debug-p (progn (setenv "DEBUG" "1") (doom--print (doom--format (format (doom--output-class 'info "DEBUG=1")))))) (if auto-accept-p (progn (setenv "YES" auto-accept-p) (doom--print (doom--format (format (doom--output-class 'info "Confirmations auto-accept enabled")))))) (throw 'exit "__DOOMRESTART=1 $@"))) (if loadfile (progn (load (doom-path loadfile) nil t t))) (if help-p (progn (if command (progn (setq args (cons command args)))) (setq command "help"))) (cons t (if (null command) (doom-cli-execute "help") (let ((start-time (current-time))) (run-hooks 'doom-cli-pre-hook) (if (getenv "__DOOMRESTART") nil (doom--print (doom--format (format (doom--output-class 'start "Executing 'doom %s' with Emacs %s at %s") (string-join (cons (or (condition-case nil (progn (let ((cl-x (doom-cli-get command))) (progn (or (progn (and (memq (type-of cl-x) cl-struct-doom-cli-tags) t)) (signal 'wrong-type-argument (list 'doom-cli cl-x))) (aref cl-x 1)))) (error nil)) command) args) " ") emacs-version (format-time-string "%Y-%m-%d %H:%M:%S"))))) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (let* ((result (and t (apply #'doom-cli-execute command args)))) (if result (progn (run-hooks 'doom-cli-post-hook) (doom--print (doom--format (format (doom--output-class 'success "Finished in %s") (let* ((duration (float-time (time-subtract (current-time) before-init-time))) (hours (/ (truncate duration) 60 60)) (minutes (- (/ (truncate duration) 60) (* hours 60))) (seconds (- duration (* hours 60 60) (* minutes 60)))) (string-join (delq nil (list (if (= 0 hours) nil (format "%dh" hours)) (if (= 0 minutes) nil (format "%dm" minutes)) (format (if (> duration 60) "%ds" "%.4fs") seconds)))))))) result) nil)))))))) (save-current-buffer (set-buffer log-buffer) (require 'ansi-color) (ansi-color-filter-region (point-min) (point-max))) (let ((dest doom--cli-log-buffer)) (cond ((bufferp dest) (save-current-buffer (set-buffer dest) (insert-buffer-substring log-buffer))) ((stringp dest) (make-directory (file-name-directory dest) 'parents) (let ((temp-file dest) (temp-buffer (generate-new-buffer " *temp file*" t))) (unwind-protect (prog1 (save-current-buffer (set-buffer temp-buffer) (insert-buffer-substring log-buffer)) (save-current-buffer (set-buffer temp-buffer) (write-region nil nil temp-file nil 0))) (and (buffer-name temp-buffer) (kill-buffer temp-buffer)))))) (kill-buffer log-buffer)))) (fset #'message old))

(let* ((vnew #'(lambda (msg &rest args) "\n\n(fn MSG &rest ARGS)" (progn (if msg (progn (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (save-current-buffer (set-buffer log-buffer) (insert (doom--format (apply #'format msg args)) "\n")) (if (or doom-debug-p (not inhibit-message)) (progn (doom--print (doom--format (apply #'format msg args)))))))) message))) (old (symbol-function #'message))) (unwind-protect (progn (fset #'message vnew) (unwind-protect (progn (if nocolor (progn (setq doom-output-backend nil))) (catch 'exit (if (and (not (getenv "__DOOMRESTART")) (or doomdir localdir debug-p auto-accept-p)) (progn (if doomdir (progn (setenv "DOOMDIR" (file-name-as-directory doomdir)) (doom--print (doom--format (format (doom--output-class 'info "DOOMDIR=%s") doomdir))))) (if localdir (progn (setenv "DOOMLOCALDIR" (file-name-as-directory localdir)) (doom--print (doom--format (format (doom--output-class 'info "DOOMLOCALDIR=%s") localdir))))) (if debug-p (progn (setenv "DEBUG" "1") (doom--print (doom--format (format (doom--output-class 'info "DEBUG=1")))))) (if auto-accept-p (progn (setenv "YES" auto-accept-p) (doom--print (doom--format (format (doom--output-class 'info "Confirmations auto-accept enabled")))))) (throw 'exit "__DOOMRESTART=1 $@"))) (if loadfile (progn (load (doom-path loadfile) nil t t))) (if help-p (progn (if command (progn (setq args (cons command args)))) (setq command "help"))) (cons t (if (null command) (doom-cli-execute "help") (let ((start-time (current-time))) (run-hooks 'doom-cli-pre-hook) (if (getenv "__DOOMRESTART") nil (doom--print (doom--format (format (doom--output-class 'start "Executing 'doom %s' with Emacs %s at %s") (string-join (cons (or (condition-case nil (progn (let ((cl-x (doom-cli-get command))) (progn (or (progn (and (memq (type-of cl-x) cl-struct-doom-cli-tags) t)) (signal 'wrong-type-argument (list 'doom-cli cl-x))) (aref cl-x 1)))) (error nil)) command) args) " ") emacs-version (format-time-string "%Y-%m-%d %H:%M:%S"))))) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (let* ((result (and t (apply #'doom-cli-execute command args)))) (if result (progn (run-hooks 'doom-cli-post-hook) (doom--print (doom--format (format (doom--output-class 'success "Finished in %s") (let* ((duration (float-time (time-subtract (current-time) before-init-time))) (hours (/ (truncate duration) 60 60)) (minutes (- (/ (truncate duration) 60) (* hours 60))) (seconds (- duration (* hours 60 60) (* minutes 60)))) (string-join (delq nil (list (if (= 0 hours) nil (format "%dh" hours)) (if (= 0 minutes) nil (format "%dm" minutes)) (format (if (> duration 60) "%ds" "%.4fs") seconds)))))))) result) nil)))))))) (save-current-buffer (set-buffer log-buffer) (require 'ansi-color) (ansi-color-filter-region (point-min) (point-max))) (let ((dest doom--cli-log-buffer)) (cond ((bufferp dest) (save-current-buffer (set-buffer dest) (insert-buffer-substring log-buffer))) ((stringp dest) (make-directory (file-name-directory dest) 'parents) (let ((temp-file dest) (temp-buffer (generate-new-buffer " *temp file*" t))) (unwind-protect (prog1 (save-current-buffer (set-buffer temp-buffer) (insert-buffer-substring log-buffer)) (save-current-buffer (set-buffer temp-buffer) (write-region nil nil temp-file nil 0))) (and (buffer-name temp-buffer) (kill-buffer temp-buffer)))))) (kill-buffer log-buffer)))) (fset #'message old)))

(let ((message (symbol-function #'message))) (ignore message) (let* ((vnew #'(lambda (msg &rest args) "\n\n(fn MSG &rest ARGS)" (progn (if msg (progn (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (save-current-buffer (set-buffer log-buffer) (insert (doom--format (apply #'format msg args)) "\n")) (if (or doom-debug-p (not inhibit-message)) (progn (doom--print (doom--format (apply #'format msg args)))))))) message))) (old (symbol-function #'message))) (unwind-protect (progn (fset #'message vnew) (unwind-protect (progn (if nocolor (progn (setq doom-output-backend nil))) (catch 'exit (if (and (not (getenv "__DOOMRESTART")) (or doomdir localdir debug-p auto-accept-p)) (progn (if doomdir (progn (setenv "DOOMDIR" (file-name-as-directory doomdir)) (doom--print (doom--format (format (doom--output-class 'info "DOOMDIR=%s") doomdir))))) (if localdir (progn (setenv "DOOMLOCALDIR" (file-name-as-directory localdir)) (doom--print (doom--format (format (doom--output-class 'info "DOOMLOCALDIR=%s") localdir))))) (if debug-p (progn (setenv "DEBUG" "1") (doom--print (doom--format (format (doom--output-class 'info "DEBUG=1")))))) (if auto-accept-p (progn (setenv "YES" auto-accept-p) (doom--print (doom--format (format (doom--output-class 'info "Confirmations auto-accept enabled")))))) (throw 'exit "__DOOMRESTART=1 $@"))) (if loadfile (progn (load (doom-path loadfile) nil t t))) (if help-p (progn (if command (progn (setq args (cons command args)))) (setq command "help"))) (cons t (if (null command) (doom-cli-execute "help") (let ((start-time (current-time))) (run-hooks 'doom-cli-pre-hook) (if (getenv "__DOOMRESTART") nil (doom--print (doom--format (format (doom--output-class 'start "Executing 'doom %s' with Emacs %s at %s") (string-join (cons (or (condition-case nil (progn (let ((cl-x (doom-cli-get command))) (progn (or (progn (and (memq (type-of cl-x) cl-struct-doom-cli-tags) t)) (signal 'wrong-type-argument (list 'doom-cli cl-x))) (aref cl-x 1)))) (error nil)) command) args) " ") emacs-version (format-time-string "%Y-%m-%d %H:%M:%S"))))) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (let* ((result (and t (apply #'doom-cli-execute command args)))) (if result (progn (run-hooks 'doom-cli-post-hook) (doom--print (doom--format (format (doom--output-class 'success "Finished in %s") (let* ((duration (float-time (time-subtract (current-time) before-init-time))) (hours (/ (truncate duration) 60 60)) (minutes (- (/ (truncate duration) 60) (* hours 60))) (seconds (- duration (* hours 60 60) (* minutes 60)))) (string-join (delq nil (list (if (= 0 hours) nil (format "%dh" hours)) (if (= 0 minutes) nil (format "%dm" minutes)) (format (if (> duration 60) "%ds" "%.4fs") seconds)))))))) result) nil)))))))) (save-current-buffer (set-buffer log-buffer) (require 'ansi-color) (ansi-color-filter-region (point-min) (point-max))) (let ((dest doom--cli-log-buffer)) (cond ((bufferp dest) (save-current-buffer (set-buffer dest) (insert-buffer-substring log-buffer))) ((stringp dest) (make-directory (file-name-directory dest) 'parents) (let ((temp-file dest) (temp-buffer (generate-new-buffer " *temp file*" t))) (unwind-protect (prog1 (save-current-buffer (set-buffer temp-buffer) (insert-buffer-substring log-buffer)) (save-current-buffer (set-buffer temp-buffer) (write-region nil nil temp-file nil 0))) (and (buffer-name temp-buffer) (kill-buffer temp-buffer)))))) (kill-buffer log-buffer)))) (fset #'message old))))

(let* ((log-buffer (generate-new-buffer " *doom log*")) (standard-output #'(lambda (out) (save-current-buffer (set-buffer log-buffer) (insert-char out)) (send-string-to-terminal (char-to-string out))))) (let ((message (symbol-function #'message))) (ignore message) (let* ((vnew #'(lambda (msg &rest args) "\n\n(fn MSG &rest ARGS)" (progn (if msg (progn (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (save-current-buffer (set-buffer log-buffer) (insert (doom--format (apply #'format msg args)) "\n")) (if (or doom-debug-p (not inhibit-message)) (progn (doom--print (doom--format (apply #'format msg args)))))))) message))) (old (symbol-function #'message))) (unwind-protect (progn (fset #'message vnew) (unwind-protect (progn (if nocolor (progn (setq doom-output-backend nil))) (catch 'exit (if (and (not (getenv "__DOOMRESTART")) (or doomdir localdir debug-p auto-accept-p)) (progn (if doomdir (progn (setenv "DOOMDIR" (file-name-as-directory doomdir)) (doom--print (doom--format (format (doom--output-class 'info "DOOMDIR=%s") doomdir))))) (if localdir (progn (setenv "DOOMLOCALDIR" (file-name-as-directory localdir)) (doom--print (doom--format (format (doom--output-class 'info "DOOMLOCALDIR=%s") localdir))))) (if debug-p (progn (setenv "DEBUG" "1") (doom--print (doom--format (format (doom--output-class 'info "DEBUG=1")))))) (if auto-accept-p (progn (setenv "YES" auto-accept-p) (doom--print (doom--format (format (doom--output-class 'info "Confirmations auto-accept enabled")))))) (throw 'exit "__DOOMRESTART=1 $@"))) (if loadfile (progn (load (doom-path loadfile) nil t t))) (if help-p (progn (if command (progn (setq args (cons command args)))) (setq command "help"))) (cons t (if (null command) (doom-cli-execute "help") (let ((start-time (current-time))) (run-hooks 'doom-cli-pre-hook) (if (getenv "__DOOMRESTART") nil (doom--print (doom--format (format (doom--output-class 'start "Executing 'doom %s' with Emacs %s at %s") (string-join (cons (or (condition-case nil (progn (let ((cl-x (doom-cli-get command))) (progn (or (progn (and (memq (type-of cl-x) cl-struct-doom-cli-tags) t)) (signal 'wrong-type-argument (list 'doom-cli cl-x))) (aref cl-x 1)))) (error nil)) command) args) " ") emacs-version (format-time-string "%Y-%m-%d %H:%M:%S"))))) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (let* ((result (and t (apply #'doom-cli-execute command args)))) (if result (progn (run-hooks 'doom-cli-post-hook) (doom--print (doom--format (format (doom--output-class 'success "Finished in %s") (let* ((duration (float-time (time-subtract (current-time) before-init-time))) (hours (/ (truncate duration) 60 60)) (minutes (- (/ (truncate duration) 60) (* hours 60))) (seconds (- duration (* hours 60 60) (* minutes 60)))) (string-join (delq nil (list (if (= 0 hours) nil (format "%dh" hours)) (if (= 0 minutes) nil (format "%dm" minutes)) (format (if (> duration 60) "%ds" "%.4fs") seconds)))))))) result) nil)))))))) (save-current-buffer (set-buffer log-buffer) (require 'ansi-color) (ansi-color-filter-region (point-min) (point-max))) (let ((dest doom--cli-log-buffer)) (cond ((bufferp dest) (save-current-buffer (set-buffer dest) (insert-buffer-substring log-buffer))) ((stringp dest) (make-directory (file-name-directory dest) 'parents) (let ((temp-file dest) (temp-buffer (generate-new-buffer " *temp file*" t))) (unwind-protect (prog1 (save-current-buffer (set-buffer temp-buffer) (insert-buffer-substring log-buffer)) (save-current-buffer (set-buffer temp-buffer) (write-region nil nil temp-file nil 0))) (and (buffer-name temp-buffer) (kill-buffer temp-buffer)))))) (kill-buffer log-buffer)))) (fset #'message old)))))

(condition-case e (let* ((log-buffer (generate-new-buffer " *doom log*")) (standard-output #'(lambda (out) (save-current-buffer (set-buffer log-buffer) (insert-char out)) (send-string-to-terminal (char-to-string out))))) (let ((message (symbol-function #'message))) (ignore message) (let* ((vnew #'(lambda (msg &rest args) "\n\n(fn MSG &rest ARGS)" (progn (if msg (progn (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (save-current-buffer (set-buffer log-buffer) (insert (doom--format (apply #'format msg args)) "\n")) (if (or doom-debug-p (not inhibit-message)) (progn (doom--print (doom--format (apply #'format msg args)))))))) message))) (old (symbol-function #'message))) (unwind-protect (progn (fset #'message vnew) (unwind-protect (progn (if nocolor (progn (setq doom-output-backend nil))) (catch 'exit (if (and (not (getenv "__DOOMRESTART")) (or doomdir localdir debug-p auto-accept-p)) (progn (if doomdir (progn (setenv "DOOMDIR" (file-name-as-directory doomdir)) (doom--print (doom--format (format (doom--output-class 'info "DOOMDIR=%s") doomdir))))) (if localdir (progn (setenv "DOOMLOCALDIR" (file-name-as-directory localdir)) (doom--print (doom--format (format (doom--output-class 'info "DOOMLOCALDIR=%s") localdir))))) (if debug-p (progn (setenv "DEBUG" "1") (doom--print (doom--format (format (doom--output-class 'info "DEBUG=1")))))) (if auto-accept-p (progn (setenv "YES" auto-accept-p) (doom--print (doom--format (format (doom--output-class 'info "Confirmations auto-accept enabled")))))) (throw 'exit "__DOOMRESTART=1 $@"))) (if loadfile (progn (load (doom-path loadfile) nil t t))) (if help-p (progn (if command (progn (setq args (cons command args)))) (setq command "help"))) (cons t (if (null command) (doom-cli-execute "help") (let ((start-time (current-time))) (run-hooks 'doom-cli-pre-hook) (if (getenv "__DOOMRESTART") nil (doom--print (doom--format (format (doom--output-class 'start "Executing 'doom %s' with Emacs %s at %s") (string-join (cons (or (condition-case nil (progn (let ((cl-x (doom-cli-get command))) (progn (or (progn (and (memq (type-of cl-x) cl-struct-doom-cli-tags) t)) (signal 'wrong-type-argument (list 'doom-cli cl-x))) (aref cl-x 1)))) (error nil)) command) args) " ") emacs-version (format-time-string "%Y-%m-%d %H:%M:%S"))))) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (let* ((result (and t (apply #'doom-cli-execute command args)))) (if result (progn (run-hooks 'doom-cli-post-hook) (doom--print (doom--format (format (doom--output-class 'success "Finished in %s") (let* ((duration (float-time (time-subtract (current-time) before-init-time))) (hours (/ (truncate duration) 60 60)) (minutes (- (/ (truncate duration) 60) (* hours 60))) (seconds (- duration (* hours 60 60) (* minutes 60)))) (string-join (delq nil (list (if (= 0 hours) nil (format "%dh" hours)) (if (= 0 minutes) nil (format "%dm" minutes)) (format (if (> duration 60) "%ds" "%.4fs") seconds)))))))) result) nil)))))))) (save-current-buffer (set-buffer log-buffer) (require 'ansi-color) (ansi-color-filter-region (point-min) (point-max))) (let ((dest doom--cli-log-buffer)) (cond ((bufferp dest) (save-current-buffer (set-buffer dest) (insert-buffer-substring log-buffer))) ((stringp dest) (make-directory (file-name-directory dest) 'parents) (let ((temp-file dest) (temp-buffer (generate-new-buffer " *temp file*" t))) (unwind-protect (prog1 (save-current-buffer (set-buffer temp-buffer) (insert-buffer-substring log-buffer)) (save-current-buffer (set-buffer temp-buffer) (write-region nil nil temp-file nil 0))) (and (buffer-name temp-buffer) (kill-buffer temp-buffer)))))) (kill-buffer log-buffer)))) (fset #'message old))))) (doom-cli-command-not-found-error (doom--print (doom--format (format (doom--output-class 'error "Command 'doom %s' not recognized") (string-join (cdr e) " ")))) (doom--print (doom--format (format "\nDid you mean one of these commands?"))) (apply #'doom-cli-execute "help" "--similar" (string-join (cdr e) " ")) 5) (doom-cli-wrong-number-of-arguments-error (let* ((--cl-rest-- (cdr e)) (route (if (= (length --cl-rest--) 5) (car-safe (prog1 --cl-rest-- (setq --cl-rest-- (cdr --cl-rest--)))) (signal 'wrong-number-of-arguments (list '(route opt arg n d) (length --cl-rest--))))) (opt (car-safe (prog1 --cl-rest-- (setq --cl-rest-- (cdr --cl-rest--))))) (arg (car-safe (prog1 --cl-rest-- (setq --cl-rest-- (cdr --cl-rest--))))) (n (car-safe (prog1 --cl-rest-- (setq --cl-rest-- (cdr --cl-rest--))))) (d (car-safe --cl-rest--))) (progn (doom--print (doom--format (format (doom--output-class 'error "doom %s: %S requires %d arguments, but %d given\n") (mapconcat #'symbol-name route " ") arg n d))) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (apply #'doom-cli-execute "help" (mapcar #'symbol-name route))))) 6) (doom-cli-unrecognized-option-error (let ((option (car (cdr e)))) (doom--print (doom--format (format (doom--output-class 'error "Unrecognized option: %S") option))) (if (string-match "^--[^=]+=\\(.+\\)$" option) (progn (doom--print (doom--format (format "The %S syntax isn't supported. Use '%s %s' instead." option (car (split-string option "=")) (match-string 1 option))))))) 7) (doom-cli-deprecated-error (let* ((commands (cdr e)) (route (if commands (car-safe (prog1 commands (setq commands (cdr commands)))) (signal 'wrong-number-of-arguments (list '(route . commands) (length commands)))))) (progn (doom--print (doom--format (format (doom--output-class 'warn "The 'doom %s' command was removed and replaced with:\n") (mapconcat #'symbol-name route " ")))) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (let ((--dolist-tail-- commands)) (while --dolist-tail-- (let ((command (car --dolist-tail--))) (doom--print (doom--format (format (doom--output-class 'info "%s") command))) (setq --dolist-tail-- (cdr --dolist-tail--)))))))) 8) (user-error (doom--print (doom--format (format (doom--output-class 'warn "%s") (car (cdr e))))) 9))

(let ((help-p (cdr (assq 'help-p --alist--))) (auto-accept-p (cdr (assq 'auto-accept-p --alist--))) (debug-p (cdr (assq 'debug-p --alist--))) (loadfile (cdr (assq 'loadfile --alist--))) (doomdir (cdr (assq 'doomdir --alist--))) (localdir (cdr (assq 'localdir --alist--))) (nocolor (cdr (assq 'nocolor --alist--))) (command (cdr (assq 'command --alist--))) (args (cdr (assq 'args --alist--)))) (condition-case e (let* ((log-buffer (generate-new-buffer " *doom log*")) (standard-output #'(lambda (out) (save-current-buffer (set-buffer log-buffer) (insert-char out)) (send-string-to-terminal (char-to-string out))))) (let ((message (symbol-function #'message))) (ignore message) (let* ((vnew #'(lambda (msg &rest args) "\n\n(fn MSG &rest ARGS)" (progn (if msg (progn (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (save-current-buffer (set-buffer log-buffer) (insert (doom--format (apply #'format msg args)) "\n")) (if (or doom-debug-p (not inhibit-message)) (progn (doom--print (doom--format (apply #'format msg args)))))))) message))) (old (symbol-function #'message))) (unwind-protect (progn (fset #'message vnew) (unwind-protect (progn (if nocolor (progn (setq doom-output-backend nil))) (catch 'exit (if (and (not (getenv "__DOOMRESTART")) (or doomdir localdir debug-p auto-accept-p)) (progn (if doomdir (progn (setenv "DOOMDIR" (file-name-as-directory doomdir)) (doom--print (doom--format (format (doom--output-class 'info "DOOMDIR=%s") doomdir))))) (if localdir (progn (setenv "DOOMLOCALDIR" (file-name-as-directory localdir)) (doom--print (doom--format (format (doom--output-class 'info "DOOMLOCALDIR=%s") localdir))))) (if debug-p (progn (setenv "DEBUG" "1") (doom--print (doom--format (format (doom--output-class 'info "DEBUG=1")))))) (if auto-accept-p (progn (setenv "YES" auto-accept-p) (doom--print (doom--format (format (doom--output-class 'info "Confirmations auto-accept enabled")))))) (throw 'exit "__DOOMRESTART=1 $@"))) (if loadfile (progn (load (doom-path loadfile) nil t t))) (if help-p (progn (if command (progn (setq args (cons command args)))) (setq command "help"))) (cons t (if (null command) (doom-cli-execute "help") (let ((start-time (current-time))) (run-hooks 'doom-cli-pre-hook) (if (getenv "__DOOMRESTART") nil (doom--print (doom--format (format (doom--output-class 'start "Executing 'doom %s' with Emacs %s at %s") (string-join (cons (or (condition-case nil (progn (let ((cl-x (doom-cli-get command))) (progn (or (progn (and (memq (type-of cl-x) cl-struct-doom-cli-tags) t)) (signal 'wrong-type-argument (list 'doom-cli cl-x))) (aref cl-x 1)))) (error nil)) command) args) " ") emacs-version (format-time-string "%Y-%m-%d %H:%M:%S"))))) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (let* ((result (and t (apply #'doom-cli-execute command args)))) (if result (progn (run-hooks 'doom-cli-post-hook) (doom--print (doom--format (format (doom--output-class 'success "Finished in %s") (let* ((duration (float-time (time-subtract (current-time) before-init-time))) (hours (/ (truncate duration) 60 60)) (minutes (- (/ (truncate duration) 60) (* hours 60))) (seconds (- duration (* hours 60 60) (* minutes 60)))) (string-join (delq nil (list (if (= 0 hours) nil (format "%dh" hours)) (if (= 0 minutes) nil (format "%dm" minutes)) (format (if (> duration 60) "%ds" "%.4fs") seconds)))))))) result) nil)))))))) (save-current-buffer (set-buffer log-buffer) (require 'ansi-color) (ansi-color-filter-region (point-min) (point-max))) (let ((dest doom--cli-log-buffer)) (cond ((bufferp dest) (save-current-buffer (set-buffer dest) (insert-buffer-substring log-buffer))) ((stringp dest) (make-directory (file-name-directory dest) 'parents) (let ((temp-file dest) (temp-buffer (generate-new-buffer " *temp file*" t))) (unwind-protect (prog1 (save-current-buffer (set-buffer temp-buffer) (insert-buffer-substring log-buffer)) (save-current-buffer (set-buffer temp-buffer) (write-region nil nil temp-file nil 0))) (and (buffer-name temp-buffer) (kill-buffer temp-buffer)))))) (kill-buffer log-buffer)))) (fset #'message old))))) (doom-cli-command-not-found-error (doom--print (doom--format (format (doom--output-class 'error "Command 'doom %s' not recognized") (string-join (cdr e) " ")))) (doom--print (doom--format (format "\nDid you mean one of these commands?"))) (apply #'doom-cli-execute "help" "--similar" (string-join (cdr e) " ")) 5) (doom-cli-wrong-number-of-arguments-error (let* ((--cl-rest-- (cdr e)) (route (if (= (length --cl-rest--) 5) (car-safe (prog1 --cl-rest-- (setq --cl-rest-- (cdr --cl-rest--)))) (signal 'wrong-number-of-arguments (list '(route opt arg n d) (length --cl-rest--))))) (opt (car-safe (prog1 --cl-rest-- (setq --cl-rest-- (cdr --cl-rest--))))) (arg (car-safe (prog1 --cl-rest-- (setq --cl-rest-- (cdr --cl-rest--))))) (n (car-safe (prog1 --cl-rest-- (setq --cl-rest-- (cdr --cl-rest--))))) (d (car-safe --cl-rest--))) (progn (doom--print (doom--format (format (doom--output-class 'error "doom %s: %S requires %d arguments, but %d given\n") (mapconcat #'symbol-name route " ") arg n d))) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (apply #'doom-cli-execute "help" (mapcar #'symbol-name route))))) 6) (doom-cli-unrecognized-option-error (let ((option (car (cdr e)))) (doom--print (doom--format (format (doom--output-class 'error "Unrecognized option: %S") option))) (if (string-match "^--[^=]+=\\(.+\\)$" option) (progn (doom--print (doom--format (format "The %S syntax isn't supported. Use '%s %s' instead." option (car (split-string option "=")) (match-string 1 option))))))) 7) (doom-cli-deprecated-error (let* ((commands (cdr e)) (route (if commands (car-safe (prog1 commands (setq commands (cdr commands)))) (signal 'wrong-number-of-arguments (list '(route . commands) (length commands)))))) (progn (doom--print (doom--format (format (doom--output-class 'warn "The 'doom %s' command was removed and replaced with:\n") (mapconcat #'symbol-name route " ")))) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (let ((--dolist-tail-- commands)) (while --dolist-tail-- (let ((command (car --dolist-tail--))) (doom--print (doom--format (format (doom--output-class 'info "%s") command))) (setq --dolist-tail-- (cdr --dolist-tail--)))))))) 8) (user-error (doom--print (doom--format (format (doom--output-class 'warn "%s") (car (cdr e))))) 9)))

((closure ((plist) (aliases) (name . :doom) t) (--alist--) (ignore --alist--) (let ((help-p (cdr (assq 'help-p --alist--))) (auto-accept-p (cdr (assq 'auto-accept-p --alist--))) (debug-p (cdr (assq 'debug-p --alist--))) (loadfile (cdr (assq 'loadfile --alist--))) (doomdir (cdr (assq 'doomdir --alist--))) (localdir (cdr (assq 'localdir --alist--))) (nocolor (cdr (assq 'nocolor --alist--))) (command (cdr (assq 'command --alist--))) (args (cdr (assq 'args --alist--)))) (condition-case e (let* ((log-buffer (generate-new-buffer " *doom log*")) (standard-output #'(lambda (out) (save-current-buffer (set-buffer log-buffer) (insert-char out)) (send-string-to-terminal (char-to-string out))))) (let ((message (symbol-function #'message))) (ignore message) (let* ((vnew #'(lambda (msg &rest args) "\n\n(fn MSG &rest ARGS)" (progn (if msg (progn (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (save-current-buffer (set-buffer log-buffer) (insert (doom--format (apply #'format msg args)) "\n")) (if (or doom-debug-p (not inhibit-message)) (progn (doom--print (doom--format (apply #'format msg args)))))))) message))) (old (symbol-function #'message))) (unwind-protect (progn (fset #'message vnew) (unwind-protect (progn (if nocolor (progn (setq doom-output-backend nil))) (catch 'exit (if (and (not (getenv "__DOOMRESTART")) (or doomdir localdir debug-p auto-accept-p)) (progn (if doomdir (progn (setenv "DOOMDIR" (file-name-as-directory doomdir)) (doom--print (doom--format (format (doom--output-class 'info "DOOMDIR=%s") doomdir))))) (if localdir (progn (setenv "DOOMLOCALDIR" (file-name-as-directory localdir)) (doom--print (doom--format (format (doom--output-class 'info "DOOMLOCALDIR=%s") localdir))))) (if debug-p (progn (setenv "DEBUG" "1") (doom--print (doom--format (format (doom--output-class 'info "DEBUG=1")))))) (if auto-accept-p (progn (setenv "YES" auto-accept-p) (doom--print (doom--format (format (doom--output-class 'info "Confirmations auto-accept enabled")))))) (throw 'exit "__DOOMRESTART=1 $@"))) (if loadfile (progn (load (doom-path loadfile) nil t t))) (if help-p (progn (if command (progn (setq args (cons command args)))) (setq command "help"))) (cons t (if (null command) (doom-cli-execute "help") (let ((start-time (current-time))) (run-hooks 'doom-cli-pre-hook) (if (getenv "__DOOMRESTART") nil (doom--print (doom--format (format (doom--output-class 'start "Executing 'doom %s' with Emacs %s at %s") (string-join (cons (or (condition-case nil (progn (let ((cl-x (doom-cli-get command))) (progn (or (progn (and (memq (type-of cl-x) cl-struct-doom-cli-tags) t)) (signal 'wrong-type-argument (list 'doom-cli cl-x))) (aref cl-x 1)))) (error nil)) command) args) " ") emacs-version (format-time-string "%Y-%m-%d %H:%M:%S"))))) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (let* ((result (and t (apply #'doom-cli-execute command args)))) (if result (progn (run-hooks 'doom-cli-post-hook) (doom--print (doom--format (format (doom--output-class 'success "Finished in %s") (let* ((duration (float-time (time-subtract (current-time) before-init-time))) (hours (/ (truncate duration) 60 60)) (minutes (- (/ (truncate duration) 60) (* hours 60))) (seconds (- duration (* hours 60 60) (* minutes 60)))) (string-join (delq nil (list (if (= 0 hours) nil (format "%dh" hours)) (if (= 0 minutes) nil (format "%dm" minutes)) (format (if (> duration 60) "%ds" "%.4fs") seconds)))))))) result) nil)))))))) (save-current-buffer (set-buffer log-buffer) (require 'ansi-color) (ansi-color-filter-region (point-min) (point-max))) (let ((dest doom--cli-log-buffer)) (cond ((bufferp dest) (save-current-buffer (set-buffer dest) (insert-buffer-substring log-buffer))) ((stringp dest) (make-directory (file-name-directory dest) 'parents) (let ((temp-file dest) (temp-buffer (generate-new-buffer " *temp file*" t))) (unwind-protect (prog1 (save-current-buffer (set-buffer temp-buffer) (insert-buffer-substring log-buffer)) (save-current-buffer (set-buffer temp-buffer) (write-region nil nil temp-file nil 0))) (and (buffer-name temp-buffer) (kill-buffer temp-buffer)))))) (kill-buffer log-buffer)))) (fset #'message old))))) (doom-cli-command-not-found-error (doom--print (doom--format (format (doom--output-class 'error "Command 'doom %s' not recognized") (string-join (cdr e) " ")))) (doom--print (doom--format (format "\nDid you mean one of these commands?"))) (apply #'doom-cli-execute "help" "--similar" (string-join (cdr e) " ")) 5) (doom-cli-wrong-number-of-arguments-error (let* ((--cl-rest-- (cdr e)) (route (if (= (length --cl-rest--) 5) (car-safe (prog1 --cl-rest-- (setq --cl-rest-- (cdr --cl-rest--)))) (signal 'wrong-number-of-arguments (list '(route opt arg n d) (length --cl-rest--))))) (opt (car-safe (prog1 --cl-rest-- (setq --cl-rest-- (cdr --cl-rest--))))) (arg (car-safe (prog1 --cl-rest-- (setq --cl-rest-- (cdr --cl-rest--))))) (n (car-safe (prog1 --cl-rest-- (setq --cl-rest-- (cdr --cl-rest--))))) (d (car-safe --cl-rest--))) (progn (doom--print (doom--format (format (doom--output-class 'error "doom %s: %S requires %d arguments, but %d given\n") (mapconcat #'symbol-name route " ") arg n d))) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (apply #'doom-cli-execute "help" (mapcar #'symbol-name route))))) 6) (doom-cli-unrecognized-option-error (let ((option (car (cdr e)))) (doom--print (doom--format (format (doom--output-class 'error "Unrecognized option: %S") option))) (if (string-match "^--[^=]+=\\(.+\\)$" option) (progn (doom--print (doom--format (format "The %S syntax isn't supported. Use '%s %s' instead." option (car (split-string option "=")) (match-string 1 option))))))) 7) (doom-cli-deprecated-error (let* ((commands (cdr e)) (route (if commands (car-safe (prog1 commands (setq commands (cdr commands)))) (signal 'wrong-number-of-arguments (list '(route . commands) (length commands)))))) (progn (doom--print (doom--format (format (doom--output-class 'warn "The 'doom %s' command was removed and replaced with:\n") (mapconcat #'symbol-name route " ")))) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (let ((--dolist-tail-- commands)) (while --dolist-tail-- (let ((command (car --dolist-tail--))) (doom--print (doom--format (format (doom--output-class 'info "%s") command))) (setq --dolist-tail-- (cdr --dolist-tail--)))))))) 8) (user-error (doom--print (doom--format (format (doom--output-class 'warn "%s") (car (cdr e))))) 9)))) ((command . "install")))

(funcall (closure ((plist) (aliases) (name . :doom) t) (--alist--) (ignore --alist--) (let ((help-p (cdr (assq 'help-p --alist--))) (auto-accept-p (cdr (assq 'auto-accept-p --alist--))) (debug-p (cdr (assq 'debug-p --alist--))) (loadfile (cdr (assq 'loadfile --alist--))) (doomdir (cdr (assq 'doomdir --alist--))) (localdir (cdr (assq 'localdir --alist--))) (nocolor (cdr (assq 'nocolor --alist--))) (command (cdr (assq 'command --alist--))) (args (cdr (assq 'args --alist--)))) (condition-case e (let* ((log-buffer (generate-new-buffer " *doom log*")) (standard-output #'(lambda (out) (save-current-buffer (set-buffer log-buffer) (insert-char out)) (send-string-to-terminal (char-to-string out))))) (let ((message (symbol-function #'message))) (ignore message) (let* ((vnew #'(lambda (msg &rest args) "\n\n(fn MSG &rest ARGS)" (progn (if msg (progn (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (save-current-buffer (set-buffer log-buffer) (insert (doom--format (apply #'format msg args)) "\n")) (if (or doom-debug-p (not inhibit-message)) (progn (doom--print (doom--format (apply #'format msg args)))))))) message))) (old (symbol-function #'message))) (unwind-protect (progn (fset #'message vnew) (unwind-protect (progn (if nocolor (progn (setq doom-output-backend nil))) (catch 'exit (if (and (not (getenv "__DOOMRESTART")) (or doomdir localdir debug-p auto-accept-p)) (progn (if doomdir (progn (setenv "DOOMDIR" (file-name-as-directory doomdir)) (doom--print (doom--format (format (doom--output-class 'info "DOOMDIR=%s") doomdir))))) (if localdir (progn (setenv "DOOMLOCALDIR" (file-name-as-directory localdir)) (doom--print (doom--format (format (doom--output-class 'info "DOOMLOCALDIR=%s") localdir))))) (if debug-p (progn (setenv "DEBUG" "1") (doom--print (doom--format (format (doom--output-class 'info "DEBUG=1")))))) (if auto-accept-p (progn (setenv "YES" auto-accept-p) (doom--print (doom--format (format (doom--output-class 'info "Confirmations auto-accept enabled")))))) (throw 'exit "__DOOMRESTART=1 $@"))) (if loadfile (progn (load (doom-path loadfile) nil t t))) (if help-p (progn (if command (progn (setq args (cons command args)))) (setq command "help"))) (cons t (if (null command) (doom-cli-execute "help") (let ((start-time (current-time))) (run-hooks 'doom-cli-pre-hook) (if (getenv "__DOOMRESTART") nil (doom--print (doom--format (format (doom--output-class 'start "Executing 'doom %s' with Emacs %s at %s") (string-join (cons (or (condition-case nil (progn (let ((cl-x (doom-cli-get command))) (progn (or (progn (and (memq (type-of cl-x) cl-struct-doom-cli-tags) t)) (signal 'wrong-type-argument (list 'doom-cli cl-x))) (aref cl-x 1)))) (error nil)) command) args) " ") emacs-version (format-time-string "%Y-%m-%d %H:%M:%S"))))) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (let* ((result (and t (apply #'doom-cli-execute command args)))) (if result (progn (run-hooks 'doom-cli-post-hook) (doom--print (doom--format (format (doom--output-class 'success "Finished in %s") (let* ((duration (float-time (time-subtract (current-time) before-init-time))) (hours (/ (truncate duration) 60 60)) (minutes (- (/ (truncate duration) 60) (* hours 60))) (seconds (- duration (* hours 60 60) (* minutes 60)))) (string-join (delq nil (list (if (= 0 hours) nil (format "%dh" hours)) (if (= 0 minutes) nil (format "%dm" minutes)) (format (if (> duration 60) "%ds" "%.4fs") seconds)))))))) result) nil)))))))) (save-current-buffer (set-buffer log-buffer) (require 'ansi-color) (ansi-color-filter-region (point-min) (point-max))) (let ((dest doom--cli-log-buffer)) (cond ((bufferp dest) (save-current-buffer (set-buffer dest) (insert-buffer-substring log-buffer))) ((stringp dest) (make-directory (file-name-directory dest) 'parents) (let ((temp-file dest) (temp-buffer (generate-new-buffer " *temp file*" t))) (unwind-protect (prog1 (save-current-buffer (set-buffer temp-buffer) (insert-buffer-substring log-buffer)) (save-current-buffer (set-buffer temp-buffer) (write-region nil nil temp-file nil 0))) (and (buffer-name temp-buffer) (kill-buffer temp-buffer)))))) (kill-buffer log-buffer)))) (fset #'message old))))) (doom-cli-command-not-found-error (doom--print (doom--format (format (doom--output-class 'error "Command 'doom %s' not recognized") (string-join (cdr e) " ")))) (doom--print (doom--format (format "\nDid you mean one of these commands?"))) (apply #'doom-cli-execute "help" "--similar" (string-join (cdr e) " ")) 5) (doom-cli-wrong-number-of-arguments-error (let* ((--cl-rest-- (cdr e)) (route (if (= (length --cl-rest--) 5) (car-safe (prog1 --cl-rest-- (setq --cl-rest-- (cdr --cl-rest--)))) (signal 'wrong-number-of-arguments (list '(route opt arg n d) (length --cl-rest--))))) (opt (car-safe (prog1 --cl-rest-- (setq --cl-rest-- (cdr --cl-rest--))))) (arg (car-safe (prog1 --cl-rest-- (setq --cl-rest-- (cdr --cl-rest--))))) (n (car-safe (prog1 --cl-rest-- (setq --cl-rest-- (cdr --cl-rest--))))) (d (car-safe --cl-rest--))) (progn (doom--print (doom--format (format (doom--output-class 'error "doom %s: %S requires %d arguments, but %d given\n") (mapconcat #'symbol-name route " ") arg n d))) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (apply #'doom-cli-execute "help" (mapcar #'symbol-name route))))) 6) (doom-cli-unrecognized-option-error (let ((option (car (cdr e)))) (doom--print (doom--format (format (doom--output-class 'error "Unrecognized option: %S") option))) (if (string-match "^--[^=]+=\\(.+\\)$" option) (progn (doom--print (doom--format (format "The %S syntax isn't supported. Use '%s %s' instead." option (car (split-string option "=")) (match-string 1 option))))))) 7) (doom-cli-deprecated-error (let* ((commands (cdr e)) (route (if commands (car-safe (prog1 commands (setq commands (cdr commands)))) (signal 'wrong-number-of-arguments (list '(route . commands) (length commands)))))) (progn (doom--print (doom--format (format (doom--output-class 'warn "The 'doom %s' command was removed and replaced with:\n") (mapconcat #'symbol-name route " ")))) (let ((doom-output-indent (+ doom-output-indent-increment doom-output-indent))) (let ((--dolist-tail-- commands)) (while --dolist-tail-- (let ((command (car --dolist-tail--))) (doom--print (doom--format (format (doom--output-class 'info "%s") command))) (setq --dolist-tail-- (cdr --dolist-tail--)))))))) 8) (user-error (doom--print (doom--format (format (doom--output-class 'warn "%s") (car (cdr e))))) 9)))) ((command . "install")))

(if cli (funcall (progn (or (progn (and (memq (type-of cli) cl-struct-doom-cli-tags) t)) (signal 'wrong-type-argument (list 'doom-cli cli))) (aref cli 7)) (doom--cli-process cli (remq nil args))) (user-error "Couldn't find any %S command" command))

(let* ((cli (and t (doom-cli-get command)))) (if cli (funcall (progn (or (progn (and (memq (type-of cli) cl-struct-doom-cli-tags) t)) (signal 'wrong-type-argument (list 'doom-cli cli))) (aref cli 7)) (doom--cli-process cli (remq nil args))) (user-error "Couldn't find any %S command" command)))

(doom-cli-execute :doom "install")
